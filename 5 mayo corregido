import pyomo.environ as pyo

MAX_HOURS_PER_DAY = 8  # Definir el máximo de horas por día

# Creación del modelo
modelo = pyo.ConcreteModel()

# Sets
modelo.dias = pyo.RangeSet(1, 5)  # Considerando 5 días laborales por semana
modelo.horas = pyo.RangeSet(1, 8)  # Considerando 8 horas laborales por día
modelo.asignaturas = ['asignatura1', 'asignatura2', 's']  # Lista de asignaturas

# Parámetros
def horas_por_asignatura_rule(modelo, asignatura):
    # Lógica para obtener el número de horas por asignatura
    # Aquí debes proporcionar los valores correctos para cada asignatura
    if asignatura == "asignatura1":
        return 4
    elif asignatura == "asignatura2":
        return 6
    elif asignatura == "s":
        return 5  # Ajusta el valor para la asignatura 's'

modelo.horas_por_asignatura = pyo.Param(modelo.asignaturas, initialize=horas_por_asignatura_rule)

def min_dias_por_asignatura_rule(modelo, asignatura):
    # Lógica para obtener el mínimo de días por asignatura
    # Aquí debes proporcionar los valores correctos para cada asignatura
    if asignatura == "asignatura1":
        return 2
    elif asignatura == "asignatura2":
        return 3
    elif asignatura == "s":
        return 1  # Ajusta el valor para la asignatura 's'

modelo.min_dias_por_asignatura = pyo.Param(modelo.asignaturas, initialize=min_dias_por_asignatura_rule, domain=pyo.NonNegativeIntegers)

def max_dias_por_asignatura_rule(modelo, asignatura):
    # Lógica para obtener el máximo de días por asignatura
    # Aquí debes proporcionar los valores correctos para cada asignatura
    if asignatura == "asignatura1":
        return 4
    elif asignatura == "asignatura2":
        return 5
    elif asignatura == "s":
        return 3  # Ajusta el valor para la asignatura 's'

modelo.max_dias_por_asignatura = pyo.Param(modelo.asignaturas, initialize=max_dias_por_asignatura_rule, domain=pyo.NonNegativeIntegers)

def preferencias_rule(modelo, dia, hora, asignatura):
    # Lógica para obtener las preferencias por día, hora y asignatura
    # Aquí debes proporcionar los valores correctos para cada combinación
    return 0  # Valor de ejemplo, debes reemplazarlo por la lógica correcta

modelo.preferencias = pyo.Param(modelo.dias, modelo.horas, modelo.asignaturas, initialize=preferencias_rule)

# Variables de decisión
modelo.asignacion_horario = pyo.Var(modelo.dias, modelo.horas, modelo.asignaturas, domain=pyo.Binary)
modelo.asignatura_por_dia = pyo.Var(modelo.dias, modelo.asignaturas, domain=pyo.Binary)

# Restricciones
# Asignación única
modelo.restriccion_unica = pyo.ConstraintList()
for i in modelo.dias:
    for j in modelo.horas:
        modelo.restriccion_unica.add(sum(modelo.asignacion_horario[i, j, k] for k in modelo.asignaturas) <= 1)

# Impartir exactamente el número de horas lectivas de cada asignatura
modelo.restriccion_horas = pyo.ConstraintList()
for k in modelo.asignaturas:
    modelo.restriccion_horas.add(sum(modelo.asignacion_horario[i, j, k] for i in modelo.dias for j in modelo.horas) == modelo.horas_por_asignatura[k])

# Respetar el máximo de horas lectivas por asignatura diario
modelo.restriccion_max_horas_diarias = pyo.ConstraintList()
for k in modelo.asignaturas:
    for i in modelo.dias:
        modelo.restriccion_max_horas_diarias.add(sum(modelo.asignacion_horario[i, j, k] for j in modelo.horas) <= MAX_HOURS_PER_DAY)

# Restricción de apoyo para la variable indicativa
modelo.restriccion_asignatura_por_dia = pyo.ConstraintList()
for k in modelo.asignaturas:
    for i in modelo.dias:
        modelo.restriccion_asignatura_por_dia.add(modelo.asignatura_por_dia[i, k] <= sum(modelo.asignacion_horario[i, j, k] for j in modelo.horas) / MAX_HOURS_PER_DAY)

# Máximo y mínimo número de días lectivos por asignatura
modelo.restriccion_dias_asignatura = pyo.ConstraintList()
for k in modelo.asignaturas:
    modelo.restriccion_dias_asignatura.add(sum(modelo.asignatura_por_dia[i, k] for i in modelo.dias) <= modelo.max_dias_por_asignatura[k])
    modelo.restriccion_dias_asignatura.add(sum(modelo.asignatura_por_dia[i, k] for i in modelo.dias) >= modelo.min_dias_por_asignatura[k])

# Asignaciones en bloques horarios consecutivos
modelo.restriccion_bloques_consecutivos = pyo.ConstraintList()
for k in modelo.asignaturas:
    for i in modelo.dias:
        horas_ordenadas = sorted(modelo.horas)
        for j in range(len(horas_ordenadas) - 1):
            hora_actual = horas_ordenadas[j]
            hora_siguiente = horas_ordenadas[j + 1]
            modelo.restriccion_bloques_consecutivos.add(modelo.asignacion_horario[i, hora_actual, k] - modelo.asignacion_horario[i, hora_siguiente, k] <= 1 - modelo.asignacion_horario[i, hora_siguiente, k])
            modelo.restriccion_bloques_consecutivos.add(-modelo.asignacion_horario[i, hora_actual, k] + modelo.asignacion_horario[i, hora_siguiente, k] <= modelo.asignacion_horario[i, hora_actual, k])
